#!/usr/bin/env node
const { WebSocketExpress } = require('websocket-express');
const cors = require('cors')
const app = new WebSocketExpress();
const fs = require('fs');
const path = require('path');
const runPHP = require('../lib/php-execute.js');
const PrecompManager = require('../lib/precomp-manager');
const mime = require('mime');
const { EventEmitter } = require('stream');

globalThis.isBuild = true;
global.nostd = false;
const manager = new PrecompManager('dist');
process.on('exit', () => fs.rmSync(manager.buildDir, { recursive: true, force: true }));
const evs = new EventEmitter();
app.ws('/debug/:file', async (req, res) => {
    const socket = await res.accept();
    evs.on('update', file => {
        if (file.endsWith(req.params.file)) 
            socket.send('reload');
    });
    evs.on('delete', file => {
        if (file.endsWith(req.params.file)) 
            socket.send('close');
    });
})
app.useHTTP(cors());
const index = '/index.php';
app.useHTTP(async (req, res) => {
    const file = path.resolve(manager.buildDir, `.${req.path === '/' ? index : req.path}`);
    if (file.endsWith('.php')) {
        console.log('running php');
        const { headers, status, html } = await runPHP(req, file)
        for (const header of Object.entries(headers))
            res.header(...header);
        res.status(status);
        data = html;
    }
    // always explicitly set the mime type to the *output* of runing the precomps
    const mimeType = mime.lookup(file.replace('.php', '.html'), 'text/plain');
    res.header('Content-Type', mimeType);
    return res.sendFile(file);
})

const port = 3000
manager.buildAll().then(() => {
    let needsRebuild = false;
    const changed = [];
    fs.watch(manager.entry, { recursive: true }, (ev, file) => {
        file = path.resolve(file);
        if (path.basename(file) === '.buildignore') 
            return manager.makeIgnored();
        if (path.extname(file) === '.precomp.js') {
            needsRebuild = true;
            return manager.getPrecomps();
        }
        if (manager.isIgnored.test(file)) return;
        needsRebuild = true;
        if (ev === 'rename')
            fs.rm(manager.built[file], { force: true });
        delete manager.built[file];
        for (const dependant of manager.depends[file] ?? []) {
            delete manager.built[dependant];
            if (ev === 'rename')
                fs.rm(manager.built[file], { force: true });
        }
        if (ev === 'change') changed.push(file);
        else evs.emit('removed'. file);
    });
    async function checkRebuild() {
        if (needsRebuild) {
            needsRebuild = false;
            const withRemoved = Object.keys(manager.built);
            await manager.buildAll(false);
            for (const file of Object.keys(manager.built))
                if (!withRemoved.includes(file) && changed.includes(file))
                    evs.emit('update', file);
        }
        setTimeout(checkRebuild, 3000);
    }
    checkRebuild();
    app.listen(port, async () => {
        console.log(`hosted on http://localhost:${port}`);
        console.log('');
        const dirs = Object.values(manager.built);
        for (const file of dirs) {
            const extName = path.extname(file)
            const url = file.replaceAll('\\', '/').replace(manager.buildDir, '');
            if ((extName === '.php' || extName === '.html') && !file.includes('node_modules') && !file.includes('useless-history')) {
                console.log('page', `http://localhost:${port}${url}`);
            }
        }
        console.log('');
    })
});